import sys
import yaml
import os


def main():
    if len(sys.argv) < 3:
        print(
            "Usage: python3 go_gen_error_enum.py <input_openapi.yaml> <output_file.go>"
        )
        sys.exit(1)

    input_path = sys.argv[1]
    output_path = sys.argv[2]

    if not os.path.isfile(input_path):
        print(f"Error: input file not found: {input_path}")
        sys.exit(1)

    with open(input_path, "r", encoding="utf-8") as f:
        spec = yaml.safe_load(f)

    error_code_schema = (
        spec.get("components", {}).get("schemas", {}).get("ErrorCode", {})
    )
    enum_values = error_code_schema.get("enum", [])
    enum_varnames = error_code_schema.get("x-enum-varnames", [])

    if not enum_values or not enum_varnames or len(enum_values) != len(enum_varnames):
        raise ValueError("Missing or mismatched enum/x-enum-varnames")

    output = []
    output.append("// Code generated by go_gen_error_enum.py; DO NOT EDIT.")
    output.append("package api\n")
    output.append("type ErrorCode string\n")
    output.append("const (")

    for varname, value in zip(enum_varnames, enum_values):
        output.append(f'  {varname} ErrorCode = "{value}"')

    output.append(")")

    with open(output_path, "w", encoding="utf-8") as out:
        out.write("\n".join(output) + "\n")

    print(f"âœ… Enum written to: {output_path}")


if __name__ == "__main__":
    main()
