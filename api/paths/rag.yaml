query:
  post:
    tags:
      - Rag
    summary: RAG-based query processing
    description: |
      Processes user queries through the following steps:
      1. Query vectorization
      2. Hybrid search (keyword + vector search)
      3. Similar query search within session
      4. Context-based prompt generation
      5. LLM response generation
    operationId: queryRag
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../components/schemas/rag.yaml#/RagQueryRequest"
          examples:
            simple_query:
              summary: Simple query
              value:
                query: "What is list comprehension in Python?"
                sessionId: 1
            complex_query:
              summary: Complex query
              value:
                query: "Please explain in detail the methods to prevent overfitting in machine learning models"
                sessionId: "sess_987654321"
                options:
                  similarityThreshold: 0.8
                  maxSimilarQueries: 5
                  includeMetadata: true
    responses:
      "200":
        description: Successfully processed response
        content:
          application/json:
            schema:
              $ref: "../components/schemas/rag.yaml#/RagQueryResponse"
            examples:
              success_response:
                summary: Success response
                value:
                  queryId: "query_abc123"
                  sessionId: "sess_123456789"
                  response: "List comprehension is a concise way to create lists in Python..."
                  sources:
                    - sourceId: "doc_001"
                      title: "Python Basic Syntax"
                      relevanceScore: 0.95
                      excerpt: "The basic structure of list comprehension is..."
                  similarQueries:
                    - query: "How to create lists in Python"
                      similarityScore: 0.87
                      queryId: "query_xyz789"
                  metadata:
                    processingTimeMs: 1250
                    vectorSearchTimeMs: 200
                    llmResponseTimeMs: 800
                    similarityCheckTimeMs: 50
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"
            examples:
              invalid_query:
                summary: Empty query
                value:
                  errorCode: "INVALID_QUERY"
                  message: "Query is empty or too short"
                  details: "Query must be at least 2 characters long"
      "429":
        description: Rate limit exceeded
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"

sessions:
  get:
    x-ogen-operation-group: Rag
    tags:
      - Rag
    summary: Get rag session list
    operationId: listRagSessions
    parameters:
      - name: page
        in: query
        description: Page number to retrieve
        required: false
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          type: integer
          default: 30
    responses:
      "200":
        description: Successfully retrieved rag session list
        content:
          application/json:
            schema:
              $ref: "../components/schemas/rag.yaml#/RagSessionListResponse"

  post:
    x-ogen-operation-group: Rag
    tags:
      - Rag
    summary: Create rag session
    operationId: createRagSession
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../components/schemas/rag.yaml#/RagSessionCreateRequest"
    security:
      - bearerAuth: ["read:admin"]
    responses:
      "201":
        description: Rag session created
        content:
          application/json:
            schema:
              $ref: "../components/schemas/rag.yaml#/RagSessionCreateResponse"

session:
  get:
    x-ogen-operation-group: Rag
    tags:
      - Rag
    summary: Get session information
    description: Retrieve query history for a specific session
    operationId: getRagSession
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: uint64
        description: Session ID
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        description: Number of queries to return
      - name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
        description: Number of queries to skip
    responses:
      "200":
        description: Session information
        content:
          application/json:
            schema:
              $ref: "../components/schemas/rag.yaml#/RagSessionGetResponse"
      "404":
        description: Session not found
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"

  delete:
    x-ogen-operation-group: Rag
    tags:
      - Rag
    summary: Delete session
    description: Delete session and all related data
    operationId: deleteRagSession
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: uint64
        description: Session ID to delete
    responses:
      "204":
        description: Successfully deleted
      "404":
        description: Session not found
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"

indexUpdate:
  post:
    tags:
      - Rag
    summary: Update RAG knowledge base index
    description: |
      Updates the RAG system's knowledge base by reindexing documents:
      1. Retrieves documents from configured data sources
      2. Extracts text content from various file formats
      3. Splits documents into searchable chunks
      4. Generates vector embeddings for semantic search
      5. Updates the search index with processed content
    operationId: updateRagIndex
    parameters:
      - name: indexName
        in: query
        required: false
        description: Name of the RAG knowledge base index to update
        schema:
          type: string
          example: "knowledge-base"
    responses:
      "202":
        description: RAG index update process started successfully
        content:
          application/json:
            schema:
              $ref: "../components/schemas/rag.yaml#/RagIndexUpdateResponse"
            examples:
              success_response:
                summary: Update started
                value:
                  status: "accepted"
                  message: "RAG index update process started successfully"
                  indexName: "knowledge-base"
                  estimatedDurationMinutes: 15
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"
      "409":
        description: Index update already in progress
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "../components/schemas/common.yaml#/APIResponse"

indexStatus:
  get:
    tags:
      - Rag
    summary: Get RAG index update status
    description: |
      Returns the current status of RAG knowledge base update process including:
      - Current execution state (running, completed, failed)
      - Progress information (documents processed)
      - Execution timing and duration
      - Error details if any issues occurred
    operationId: getRagIndexStatus
    parameters:
      - name: indexName
        in: query
        required: false
        description: Name of the RAG knowledge base index
        schema:
          type: string
          example: "knowledge-base"
    responses:
      "200":
        description: RAG index status retrieved successfully
        content:
          application/json:
            schema:
              $ref: "../components/schemas/rag.yaml#/RagIndexStatusResponse"
            examples:
              running_status:
                summary: RAG index update in progress
                value:
                  indexName: "knowledge-base"
                  status: "running"
                  lastExecution:
                    status: "inProgress"
                    startTime: "2025-06-05T10:30:00Z"
                    documentsProcessed: 1250
                    documentsFailed: 0
                    duration: "5분 30초 (진행 중)"
                    errorCount: 0
                    warningCount: 2
                    isCompleted: false
                    isRunning: true

uploadDocument:
  post:
    tags:
      - Rag
    summary: Upload documents to RAG knowledge base
    description: |
      Uploads one or more documents to the RAG knowledge base for indexing including:
      - PDF
    operationId: uploadRagDocument
    parameters:
      - name: sessionId
        in: query
        required: true
        description: Session identifier to track upload operations
        schema:
          type: integer
          format: uint64
          example: 1234567890123456789
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "../components/schemas/rag.yaml#/RagUploadDocumentRequest"
    responses:
      "200":
        description: Documents uploaded successfully
        content:
          application/json:
            schema:
              $ref: "../components/schemas/rag.yaml#/RagUploadDocumentResponse"
            examples:
              successful_upload:
                summary: Documents uploaded successfully
                value:
                  sessionId: 1234567890123456789
