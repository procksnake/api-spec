openapi: 3.0.0
info:
  title: Sample API Spec
  version: 1.0.0

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthLoginRequest"
      responses:
        "200":
          description: Login success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthLoginResponse"

  /users:
    get:
      summary: Get user list
      security:
        - bearerAuth: [] # optional (필요 시 per-path로도 가능)
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"

    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      security:
        - bearerAuth: [] # optional (필요 시 per-path로도 가능)
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResponse"

components:
  schemas:
    ResponseBase:
      type: object
      properties:
        data:
          type: object
          nullable: true
        error:
          type: object
          nullable: true
          properties:
            code:
              type: string
            message:
              type: string
              nullable: true
            details:
              type: object
              nullable: true
          required:
            - code

    AuthLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthLoginResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseBase"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/LoginData"

    #UserListRequest //

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseBase"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"

    UserCreateRequest:
      allOf:
        - $ref: "#/components/schemas/UserBase"

    UserCreateResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseBase"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/User"

    LoginData:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"

    UserBase:
      type: object
      properties:
        name:
          type: string
          example: Alice
        email:
          type: string
          format: email
          example: alice@example.com
        role:
          type: string
          example: user
        companyId:
          type: integer
          example: 101

      required:
        - name
        - email
        - role

    User:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            id:
              type: integer
              example: 1
          required:
            - id
      required:
        - companyId
