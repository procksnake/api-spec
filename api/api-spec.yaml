openapi: 3.0.0
info:
  title: Sample API Spec
  version: 1.0.0

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthLoginRequest"
      responses:
        "200":
          description: Login success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthLoginResponse"

  /auth/logout:
    post:
      summary: User logout
      security:
        - bearerAuth: []
      requestBody:
        required: false
      responses:
        "200":
          description: Logout success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /users:
    get:
      summary: Get user list
      operationId: listUsers
      parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: Successfully retrieved user list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"

    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      security:
        - bearerAuth: ["read:admin"]
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResponse"

components:
  schemas:
    APIResponse:
      type: object
      properties:
        data:
          type: object
          nullable: true
        pagination:
          type: object
          nullable: true
          properties:
            total:
              type: integer
              description: Total number of items
            page:
              type: integer
              description: Current page number
            limit:
              type: integer
              description: Number of items per page
            totalPages:
              type: integer
              description: Total number of pages
        error:
          type: object
          nullable: true
          properties:
            code:
              type: string
            message:
              type: string
              nullable: true
            details:
              type: object
              nullable: true
          required:
            - code

    AuthLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    AuthLoginResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/LoginData"

    #UserListRequest //

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"

    UserCreateRequest:
      allOf:
        - $ref: "#/components/schemas/UserBase"

    UserCreateResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/User"

    LoginData:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"

    UserBase:
      type: object
      properties:
        name:
          type: string
          example: Alice
        email:
          type: string
          format: email
          example: alice@example.com
        role:
          type: string
          example: user
        companyId:
          type: integer
          example: 101

      required:
        - name
        - email
        - role

    User:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            id:
              type: integer
              example: 1
          required:
            - id
      required:
        - companyId
